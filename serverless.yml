service: ${self:custom.projectFullName}
frameworkVersion: '2'
useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: capacitacionAws
  stackTags:
    Ambiente: ${self:custom.stage}
    AreaResponsable: DevelopStefanini
    Comentarios: " "
    Criticidad: ALTA
    Disponibilidad: 7x24
    Nube: AWS
    Plataforma: Serverless Framework
    Proyecto: ${self:custom.project}
    Tecnologia: Serverless
    UnidadNegocio: FÃ¡brica de Sofware
  region: us-west-1

plugins:
  - serverless-webpack

custom:
  projectFullName: ${self:custom.project}
  stage: dev
  project: AWSTallerDos
  integrationBaseStackName: awstraining-api-gateway-${self:custom.stage}
  # Tables
  tableUser: ddb-${self:custom.projectFullName}-${self:custom.stage}-UserTable
  tableTopics: ddb-${self:custom.projectFullName}-${self:custom.stage}-TopicsTable
  tableAssistance: ddb-${self:custom.projectFullName}-${self:custom.stage}-AssistanceTable
  tableAuditory: ddb-${self:custom.projectFullName}-${self:custom.stage}-AuditoryTable
  tableParams: ddb-${self:custom.projectFullName}-${self:custom.stage}-ParamsTable
  # userPool: Cog-${self:custom.projectFullName}-${self:custom.stage}-userPool
  # userPoolClient: Cog-${self:custom.projectFullName}-${self:custom.stage}-userPoolClient
  # Queues
  queueAuditory: sqs-${self:custom.projectFullName}-${self:custom.stage}-AuditoryQueue
  # queueUserAuditory: sqs-${self:custom.projectFullName}-${self:custom.stage}-AuditoryUserQueue
  # queueTopicsAuditory: sqs-${self:custom.projectFullName}-${self:custom.stage}-AuditoryTopicsQueue
  # queueAssistanceAuditory: sqs-${self:custom.projectFullName}-${self:custom.stage}-AuditoryAssistanceQueue
  basePath: ${self:custom.projectFullName}/${self:custom.stage}

package:
  individually: true

functions:
  userRegister:
    name: func-${self:custom.projectFullName}-${self:custom.stage}-userRegister
    handler: lambda/cross/userControllerHandler.handler
    role: userRegiterLambdaRole
    environment:
      QUEUE_AUDITORY:         ${self:custom.queueAuditory}
      TABLE_USER:             ${self:custom.tableUser}
    events:
        - http:
            path: ${self:custom.basePath}/userRegister
            method: POST
            cors: true

  topicsRegister:
    name: func-${self:custom.projectFullName}-${self:custom.stage}-topicsRegister
    handler: lambda/cross/topicsControllerHandler.handler
    role: topicsRegiterLambdaRole
    environment:
      QUEUE_AUDITORY:         ${self:custom.queueAuditory}
      TABLE_TOPICS:           ${self:custom.tableTopics}
    events:
        - http:
            path: ${self:custom.basePath}/topicsRegister
            method: POST
            cors: true
  
  assistanceRegister:
    name: func-${self:custom.projectFullName}-${self:custom.stage}-assistanceRegister
    handler: lambda/cross/assistanceControllerHandler.handler
    role: assistanceRegiterLambdaRole
    environment:
      QUEUE_AUDITORY:         ${self:custom.queueAuditory}
      TABLE_USER:             ${self:custom.tableUser}
      TABLE_ASSISTANCE:       ${self:custom.tableAssistance}
      TABLE_TOPICS:           ${self:custom.tableTopics}
    events:
        - http:
            path: ${self:custom.basePath}/assistanceRegister
            method: POST
            cors: true

  auditory:
    name: func-${self:custom.projectFullName}-${self:custom.stage}-auditory
    handler: lambda/cross/auditoryControllerHandler.handler
    environment:
      TABLE_AUDITORY:      ${self:custom.tableAuditory}     
    role: auditoryLambdaRole
    events:
        - sqs:
            arn:
              Fn::GetAtt:
                - AuditoryQueue
                - Arn

  worker:
    name: func-${self:custom.projectFullName}-${self:custom.stage}-worker
    handler: lambda/cross/workerControllerHandler.handler
    environment:
      TABLE_TOPICS:           ${self:custom.tableTopics}
      TABLE_AUDITORY:         ${self:custom.tableAuditory}
      REGION_DB:              ${self:provider.region}     
    role: workerLambdaRole
    events:
        - http:
            path: ${self:custom.basePath}/worker
            method: GET
            cors: true
      # - schedule:
      #   rate: cron(0 24 ? * MON-FRI *)

  getTopic:
    name: func-${self:custom.projectFullName}-${self:custom.stage}-getTopic
    handler: lambda/cross/getTopicsControllerHandler.handler
    environment:
      TABLE_TOPICS:           ${self:custom.tableTopics}
      # TABLE_AUDITORY:         ${self:custom.tableAuditory}
      REGION_DB:              ${self:provider.region}     
    role: getTopicLambdaRole
    events:
        - http:
            path: ${self:custom.basePath}/getTopic
            method: GET
            authorizer: auth
            cors: true


  getParams:
    name: func-${self:custom.projectFullName}-${self:custom.stage}-getParams
    handler: lambda/cross/getParamsControllerHandler.handler
    environment:
      TABLE_PARAMS:           ${self:custom.tableParams}
      # TABLE_AUDITORY:         ${self:custom.tableAuditory}
      REGION_DB:              ${self:provider.region}     
    role: getParamsLambdaRole
    events:
        - http:
            path: ${self:custom.basePath}/getParams
            method: GET
            cors: true
            

  auth:
    name: func-${self:custom.projectFullName}-${self:custom.stage}-auth
    handler: lambda/authorizer/AuthHandler.auth

resources:
  Resources:

    # ApiGateWay:
    #   Type: AWS::ApiGateway::Api
    #   Properties:
    #     StageName: ${self:custom.stage}
    #     Auth:
    #       DefaultAuthorizer: LambdaTokenAuthorizer
    #       Authorizers:
    #         LambdaTokenAuthorizer:
    #           Resource:
    #                 - Fn::GetAtt: [ AuthFuntion, Arn ]

    # AuthFuntion:
    #   Type: 'AWS::ApiGateway::Function'
    #   Properties:
    #     CodeUri: ./authorizer
    #     Handler: handler.authorizer
    #     Runtime: nodejs12.x

    #--------------------
    # Roles
    # ------------------- 
    userRegiterLambdaRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: 'Lambda Role'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Path: /
        Policies:
          - PolicyName: 'send-message-sqs-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [ AuditoryQueue, Arn ]
          - PolicyName: 'write-dynamodb-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:GetRecords
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource:
                    - Fn::GetAtt: [ userTable, Arn ]
        RoleName: iam-${self:custom.projectFullName}-${self:custom.stage}-userLambdaRole
        Tags: 
          - Key: Name
            Value: iam-${self:custom.projectFullName}-${self:custom.stage}-userLambdaRole

    topicsRegiterLambdaRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: 'Lambda Role'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Path: /
        Policies:
          - PolicyName: 'send-message-sqs-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [ AuditoryQueue, Arn ]
          - PolicyName: 'write-dynamodb-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:GetRecords
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource:
                    - Fn::GetAtt: [ topicsTable, Arn ]
        RoleName: iam-${self:custom.projectFullName}-${self:custom.stage}-topicsLambdaRole
        Tags: 
          - Key: Name
            Value: iam-${self:custom.projectFullName}-${self:custom.stage}-topicsLambdaRole
    
    assistanceRegiterLambdaRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: 'Lambda Role'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Path: /
        Policies:
          - PolicyName: 'send-message-sqs-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [ AuditoryQueue, Arn ]
          - PolicyName: 'write-dynamodb-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:GetRecords
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource:
                    - Fn::GetAtt: [ assistanceTable, Arn ]
                    - Fn::GetAtt: [ topicsTable, Arn ]
                    - Fn::GetAtt: [ userTable, Arn ]
        RoleName: iam-${self:custom.projectFullName}-${self:custom.stage}-assistanceLambdaRole
        Tags: 
          - Key: Name
            Value: iam-${self:custom.projectFullName}-${self:custom.stage}-assistanceLambdaRole

    auditoryLambdaRole: 
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: 'Lambda Role'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Path: /
        Policies:
          - PolicyName: 'read-message-sqs-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:DeleteMessage
                    - sqs:ReceiveMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    - Fn::GetAtt: [ AuditoryQueue, Arn ]
          - PolicyName: 'write-dynamodb-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - Fn::GetAtt: [ auditoryTable, Arn ]
        RoleName: iam-${self:custom.projectFullName}-${self:custom.stage}-auditoryLambdaRole
        Tags: 
          - Key: Name
            Value: iam-${self:custom.projectFullName}-${self:custom.stage}-auditoryLambdaRole
    
    workerLambdaRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: 'Lambda Role'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Path: /
        Policies:
          - PolicyName: 'send-message-sqs-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [ AuditoryQueue, Arn ]
          - PolicyName: 'write-dynamodb-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:GetRecords
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:PartiQLSelect
                    - dynamodb:UpdateItem
                  Resource:
                    - Fn::GetAtt: [ topicsTable, Arn ]
        RoleName: iam-${self:custom.projectFullName}-${self:custom.stage}-workerLambdaRole
        Tags: 
          - Key: Name
            Value: iam-${self:custom.projectFullName}-${self:custom.stage}-workerLambdaRole

    getTopicLambdaRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: 'Lambda Role'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Path: /
        Policies:
          - PolicyName: 'read-dynamodb-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    # - dynamodb:PutItem
                    - dynamodb:GetRecords
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:PartiQLSelect
                  Resource:
                    - Fn::GetAtt: [ topicsTable, Arn ]
        RoleName: iam-${self:custom.projectFullName}-${self:custom.stage}-getTopicLambdaRole
        Tags: 
          - Key: Name
            Value: iam-${self:custom.projectFullName}-${self:custom.stage}-getTopicLambdaRole

    getParamsLambdaRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: 'Lambda Role'
        ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Path: /
        Policies:
          - PolicyName: 'read-dynamodb-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    # - dynamodb:PutItem
                    - dynamodb:GetRecords
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:PartiQLSelect
                  Resource:
                    - Fn::GetAtt: [ topicsTable, Arn ]
                    - Fn::GetAtt: [ paramsTable, Arn ]
        RoleName: iam-${self:custom.projectFullName}-${self:custom.stage}-getParamsLambdaRole
        Tags: 
          - Key: Name
            Value: iam-${self:custom.projectFullName}-${self:custom.stage}-getParamsLambdaRole
    
    #--------------------
    # Queues
    # ------------------- 

    AuditoryQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueAuditory}

    # UserAuditoryQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${self:custom.queueUserAuditory}

    # TopicsAuditoryQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${self:custom.queueTopicsAuditory}

    # AssistanceAuditoryQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${self:custom.queueAssistanceAuditory}

    #--------------------
    # Tales Dynamo
    # ------------------- 
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableUser}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    topicsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableTopics}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    assistanceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableAssistance}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    auditoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableAuditory}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    paramsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableParams}
        AttributeDefinitions:
          - AttributeName: typeParam
            AttributeType: S
        KeySchema:
          - AttributeName: typeParam
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        
# -------        
# cognito
# ------- 
    # CognitoUserPool:
    #   Type: AWS::Cognito::UserPool
    #   Properties:
    #     UserPoolName: ${self:custom.userPool}
    #     UsernameAttributes:
    #       - email
    #     AutoVerifiedAttributes:
    #       - email
    # CognitoUserPoolClient:
    #   Type: AWS::Cognito::UserPoolClient
    #   Properties:
    #     ClientName: ${self:custom.userPoolClient}
    #     UserPoolId:
    #       Ref: CognitoUserPool
    #     ExplicitAuthFlows:
    #       - ADMIN_NO_SRP_AUTH
    #     GenerateSecret: false